import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import json
import os

# –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ GitHub Secrets
API_TOKEN = os.getenv('API_TOKEN')
GROUP_ID = int(os.getenv('GROUP_ID'))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"))

user_data = {}
COUNTER_FILE = 'counter.json'

def get_next_request_number():
    if os.path.exists(COUNTER_FILE):
        with open(COUNTER_FILE, 'r') as f:
            data = json.load(f)
    else:
        data = {'counter': 0}
    data['counter'] += 1
    with open(COUNTER_FILE, 'w') as f:
        json.dump(data, f)
    return data['counter']

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ ¬´–†–µ–º–æ–Ω—Ç —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤ –°—ã–∑—Ä–∞–Ω—å¬ª.\n"
        "–ß–µ—Ä–µ–∑ –º–µ–Ω—è –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=kb
    )

@dp.message_handler(lambda message: message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_request(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@dp.message_handler(lambda message: message.from_user.id in user_data and 'name' not in user_data[message.from_user.id])
async def get_name(message: types.Message):
    user_data[message.from_user.id]['name'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")

@dp.message_handler(lambda message: message.from_user.id in user_data and 'phone' not in user_data[message.from_user.id])
async def get_phone(message: types.Message):
    user_data[message.from_user.id]['phone'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–µ–∑–¥–∞:")

@dp.message_handler(lambda message: message.from_user.id in user_data and 'address' not in user_data[message.from_user.id])
async def get_address(message: types.Message):
    user_data[message.from_user.id]['address'] = message.text
    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–º –∫—Ä–∞—Ç–∫–æ:")

@dp.message_handler(lambda message: message.from_user.id in user_data and 'problem' not in user_data[message.from_user.id])
async def get_problem(message: types.Message):
    user_data[message.from_user.id]['problem'] = message.text
    data = user_data.pop(message.from_user.id)
    request_number = get_next_request_number()
    text = (
        f"üìå –ó–∞—è–≤–∫–∞ #{request_number} üìå\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {data['problem']}"
    )
    await bot.send_message(GROUP_ID, text)
    await message.answer(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{request_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
